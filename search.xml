<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[用户及权限管理]]></title>
      <url>%2F2017%2F01%2F17%2Fauthority%2F</url>
      <content type="text"><![CDATA[Linux权限管理对于Linux而言，文件其实就是一切，而文件的权限则至关重要。 权限概念通过ls -l可以查看当前目录下所有文件以及目录的详细信息 123456789101112[centos@node /]$ ls -ltotal 60lrwxrwxrwx 1 root root 7 May 3 2016 bin -&gt; usr/bindr-xr-xr-x 4 root root 4096 Jul 25 16:23 bootdrwxr-xr-x 19 root root 2920 Jan 9 08:17 devdrwxr-xr-x 81 root root 4096 Jan 17 09:00 etcdrwxr-xr-x 3 root root 4096 Jan 17 09:00 homelrwxrwxrwx 1 root root 7 May 3 2016 lib -&gt; usr/liblrwxrwxrwx 1 root root 9 May 3 2016 lib64 -&gt; usr/lib64drwx------ 2 root root 16384 May 12 2016 lost+founddrwxr-xr-x 2 root root 4096 Aug 12 2015 media······ 文件类型dr-xr-xr-x 4 root root 4096 Jul 25 16:23 boot 这其中的d所占的第一个位置表示的是Linux中文件的类型。 f：表示常规文件d：文件目录（完成路径映射，而非Windows系统中文件夹的功能）b：block device，块设备文件，支持以“block”为单位进行随机访问c：character device，字符设备，支持以“character”为单位进行线性访问l：symbolic link，符号链接文件（软链接）p：pipe，命名管道s：socket，套接字文件 文件权限dr-xr-xr-x 4 root root 4096 Jul 25 16:23 boot r-xr-xr-x： 前三位：定义user（owner）的权限 中三位：定义group权限 右三位：定义other权限 r：readable，可读权限w：writable，可写权限x：excutable，可执行权限 而对于文件来说： 123r：代表可获取文件的数据w：代表可修改文件的数据x：可将此文件运行为进程 对于目录来说： 123r：可使用ls命令获取其下所有的文件列表w：可修改此目录下的文件列表，即创建或删除文件x：可cd至此目录中，且使用ls -l来获取文件的详细属性信息 权限组合机制 Linux文件系统表示 二进制表示 八进制表示 — 000 0 –x 001 1 -w- 010 2 -wx 011 3 r– 100 4 r-x 101 5 rw- 110 6 rwx 111 7 常用权限：664、775、750、600、755 权限管理命令Linux的三类用户： u：属主g：属组o：其他用户a：所有用户 chmod命令chmod的三种用法： 123chmod [OPTION]... MODE[,MODE]... FILE...chmod [OPTION]... OCTAL-MODE FILE...chmod [OPTION]... --reference=RFILE FILE... 1.chmod [OPTION]... MODE[,MODE]... FILE... MODE表示法： （1） 赋权表示法：直接操作一类用户所有权限位rwx 1234567891011121314[centos@node ~]$ chmod u=rwx fstab[centos@node ~]$ lltotal 20-rwxr--r-- 1 centos centos 313 Jan 17 19:00 fstab[centos@node ~]$ chmod u=rw,g=rw,o= fstab[centos@node ~]$ lltotal 20-rw-rw---- 1 centos centos 313 Jan 17 19:00 fstab[centos@node ~]$ chmod a=rw fstab[centos@node ~]$ lltotal 20-rw-rw-rw- 1 centos centos 313 Jan 17 19:00 fstab （2） 授权表示法：直接操作一类用户的一个权限位或多个 123456789[centos@node ~]$ chmod u+x,g+x fstab[centos@node ~]$ lltotal 20-rwxrwxrw- 1 centos centos 313 Jan 17 19:00 fstab[centos@node ~]$ chmod u-x fstab[centos@node ~]$ lltotal 20-rw-r---w- 1 centos centos 313 Jan 17 19:00 fstab 2.chmod [OPTION]... OCTAL-MODE FILE... 使用8进制对权限进行修改： 1234[centos@node ~]$ chmod 750 fstab [centos@node ~]$ lltotal 20-rwxr-x--- 1 centos centos 313 Jan 17 19:00 fstab 3.chmod [OPTION]... --reference=RFILE FILE... 授予FILE以RFILE的权限。 1[centos@node ~]$ chmod --reference=/var/log/messages fstab 4.OPTION选项： -R，–recursive：递归修改（推荐使用授权表示法时使用） 12345678910[centos@node ~]$ chmod -R g=rwx test #使用-R选项会修改目录以及其下的所有文件、目录权限[centos@node ~]$ ll -a testtotal 8drwxrwx--- 2 centos centos 4096 Jan 17 19:27 .drwx------ 4 centos centos 4096 Jan 17 19:00 ..-rw-rwxr-- 1 centos centos 0 Jan 17 19:26 test1-rw-rwxr-- 1 centos centos 0 Jan 17 19:27 test2-rw-rwxr-- 1 centos centos 0 Jan 17 19:27 test3-rw-rwxr-- 1 centos centos 0 Jan 17 19:27 test4-rw-rwxr-- 1 centos centos 0 Jan 17 19:27 test5 注意：用户只能修改属主为自己的那些文件的权限 从属关系管理命令chown命令chown的两种用法： 12chown [OPTION]... [OWNER][:[GROUP]] FILE...chown [OPTION]... --reference=RFILE FILE... OPTION： -R：递归修改 123456789101112131415161718192021[root@node centos]# chown -R docker:mygrp test[root@node centos]# ll -a testtotal 8drwxrwx--- 2 docker mygrp 4096 Jan 17 19:27 .drwx------ 4 centos centos 4096 Jan 17 19:00 ..-rw-rwxr-- 1 docker mygrp 0 Jan 17 19:26 test1-rw-rwxr-- 1 docker mygrp 0 Jan 17 19:27 test2-rw-rwxr-- 1 docker mygrp 0 Jan 17 19:27 test3-rw-rwxr-- 1 docker mygrp 0 Jan 17 19:27 test4-rw-rwxr-- 1 docker mygrp 0 Jan 17 19:27 test5[root@node centos]# chown -R :centos test[root@node centos]# ll -a testtotal 8drwxrwx--- 2 docker centos 4096 Jan 17 19:27 .drwx------ 4 centos centos 4096 Jan 17 19:00 ..-rw-rwxr-- 1 docker centos 0 Jan 17 19:26 test1-rw-rwxr-- 1 docker centos 0 Jan 17 19:27 test2-rw-rwxr-- 1 docker centos 0 Jan 17 19:27 test3-rw-rwxr-- 1 docker centos 0 Jan 17 19:27 test4-rw-rwxr-- 1 docker centos 0 Jan 17 19:27 test5 注意：修改属组只有管理员（root）可以修改 文件权限的反向掩码（遮罩码）文件的默认权限：666-umask 目录的默认权限：777-umask 注意：之所以文件用666去减，表示文件默认不能拥有执行权限 umask命令123456789[root@node ~]# umask0022[root@node ~]# umask 133 #设置umask的值：umask UMASK[root@node ~]# umask0133[root@node ~]# mkdir test[root@node ~]# ll总用量 4drw-r--r-- 2 root root 4096 1月 17 19:59 test 注意：umask MASK只对当前shell进程有效]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Bash的基础特性（2）]]></title>
      <url>%2F2017%2F01%2F17%2Fbash2%2F</url>
      <content type="text"><![CDATA[文件名通配 globbing匹配模式：对多个文件名进行通配 Shell通配符： 字符 含义 实例 * 匹配任意长度的任意字符 p*a，p与a之间可以有多个字符，也可以一个也没有。如：pa，p123a，p2a。 ? 匹配任意单个字符 p?a，p与a之间有且只能有一个字符，可以是任意字符。如：p3a，pda。 [ ] 匹配指定范围内的任意单个字符 [abc]，匹配abc中任意一个单个字符的文件。如：a，b，c。 [\^ ] 匹配指定范围外的任意单个字符 [\^abc]，匹配除abc中任意一个单个字符的文件。如：d，e，f。 注意：在进行文件名通配时，不分区字符大小写 特殊格式通配符123456789[A-Z]：所有大写字母[0-9]：所有数字[[:upper:]]：所有大写字母[[:lower:]]：所有小写字母[[:alpha:]]：所有字母[[:digit:]]：所有数字[[:alnum:]]：所有的数字和字母[[:space:]]：所有空白字符[[:punct:]]：所有标点符号 通配符练习 显示/var目录下所有以l字母开头，以一个小写字母结尾，且中间出现一位任意字符的文件或目录。 123[centos@node ~]$ ls -ld /var/l?[[:lower:]] drwxr-xr-x. 26 root root 4096 Jan 6 10:50 /var/libdrwxr-xr-x. 8 root root 4096 Jan 8 16:33 /var/log 显示/etc目录下，以任意一位数字开头，且以非数字结尾的文件或目录 12[centos@node ~]$ ls -ld /etc/[[:digit:]]*[^[:digit:]] #[[:digit:]]可以使用[0-9]替换-rw-r--r--. 1 root root 0 Jan 12 10:05 /etc/3abc23y 显示/etc目录下，以非字母开头，后面跟一个字母及其他任意长度任意字符的文件或目录 12345[centos@node ~]$ ls -ld /etc/[^a-z][a-z]*-rw-r--r--. 1 root root 0 Jan 12 10:07 /etc/1bwd2a1d[centos@node ~]$ ls -ld /etc/[^[:alpha:]][a-z]*-rw-r--r--. 1 root root 0 Jan 12 10:07 /etc/1bwd2a1d 复制/etc目录下，所有以m字母开头，以非数字结尾的文件或目录至/tmp/magedu.com目录 12345678910111213141516[centos@node ~]$ mkdir /tmp/magedu.com[centos@node ~]$ cp -r /etc/m*[^[:digit:]] /tmp/magedu.com/[centos@node ~]$ ls -l /tmp/magedu.com/total 36-r--r--r--. 1 centos centos 33 Jan 12 10:14 machine-id-rw-r--r--. 1 centos centos 111 Jan 12 10:14 magic-rw-r--r--. 1 centos centos 1968 Jan 12 10:14 mail.rc-rw-r--r--. 1 centos centos 5122 Jan 12 10:14 makedumpfile.conf.sample-rw-r--r--. 1 centos centos 5171 Jan 12 10:14 man_db.conf-rw-r--r--. 1 centos centos 936 Jan 12 10:14 mke2fs.confdrwxr-xr-x. 2 centos centos 41 Jan 12 10:14 modprobe.ddrwxr-xr-x. 2 centos centos 6 Jan 12 10:14 modules-load.d-rw-r--r--. 1 centos centos 0 Jan 12 10:14 motdlrwxrwxrwx. 1 centos centos 17 Jan 12 10:14 mtab -&gt; /proc/self/mounts-rw-r--r--. 1 centos centos 570 Jan 12 10:14 my.cnfdrwxr-xr-x. 2 centos centos 31 Jan 12 10:14 my.cnf.d 复制/usr/share/man目录下，所有以man开头，后跟一个数字结尾的文件或目录至/tmp/man目录下 12345678910111213[centos@node ~]$ mkdir /tmp/man[centos@node ~]$ cp -r /usr/share/man/man[[:digit:]] /tmp/man/[centos@node ~]$ ls -l /tmp/mantotal 192drwxr-xr-x. 2 centos centos 36864 Jan 12 10:18 man1drwxr-xr-x. 2 centos centos 6 Jan 12 10:18 man2drwxr-xr-x. 2 centos centos 49152 Jan 12 10:18 man3drwxr-xr-x. 2 centos centos 49 Jan 12 10:18 man4drwxr-xr-x. 2 centos centos 12288 Jan 12 10:18 man5drwxr-xr-x. 2 centos centos 6 Jan 12 10:18 man6drwxr-xr-x. 2 centos centos 4096 Jan 12 10:18 man7drwxr-xr-x. 2 centos centos 24576 Jan 12 10:18 man8drwxr-xr-x. 2 centos centos 6 Jan 12 10:18 man9 复制/etc目录下，所有以.conf结尾，且以m,n,r,p开头的文件或目录至/tmp/conf.d目录下 12345678910[centos@node ~]$ mkdir /tmp/conf.d[centos@node ~]$ cp -r /etc/[mnrp]*.conf /tmp/conf.d[centos@node ~]$ ls -l /tmp/conf.dtotal 28-rw-r--r--. 1 centos centos 5171 Jan 12 10:21 man_db.conf-rw-r--r--. 1 centos centos 936 Jan 12 10:21 mke2fs.conf-rw-r--r--. 1 centos centos 1728 Jan 12 10:21 nsswitch.conf-rw-r--r--. 1 centos centos 80 Jan 12 10:21 resolv.conf-rw-r--r--. 1 centos centos 458 Jan 12 10:21 rsyncd.conf-rw-r--r--. 1 centos centos 3232 Jan 12 10:21 rsyslog.conf IO重定向及管道程序IO输入输出设备Linux设备一切皆文件 输入设备：文件。键盘设备、文件系统上的常规文件、网卡设备文件等。 输出设备：文件。显示器、文件系统上的常规文件。网卡设备文件等。 程序的三种数据流 输入的输入流： &lt;– 标准输入（stdin），键盘； 输出的数据流： –&gt; 标准输出（stdout），显示器； 错误的输出流： –&gt; 标准错误输出（stderr），显示器； 文件描述符 File Descriptor标准输出：0标准输出：1错误输出：2 IO重定向输出重定向： &gt;特性：覆盖输出 1234[centos@node ~]$ cat /etc/issue &gt; /tmp/issue.out[centos@node ~]$ cat /tmp/issue.out\SKernel \r on an \m 注意：在root用户执行输出重定向时，不会提示是否覆盖原文件，所以在管理员模式下慎用 输出重写向： &gt;&gt;特性：追加输出 12345678910111213141516[centos@node ~]$ cat /etc/fstab &gt;&gt; /tmp/issue.out [centos@node ~]$ cat /tmp/issue.out\SKernel \r on an \m## /etc/fstab# Created by anaconda on Fri Jan 6 10:46:24 2017## Accessible filesystems, by reference, are maintained under '/dev/disk'# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#/dev/mapper/cl-root / xfs defaults 0 0UUID=829a249d-bacd-4ead-b51c-e80e15acef21 /boot xfs defaults 0 0/dev/mapper/cl-swap swap swap defaults 0 0 错误输出流重定向： 2&gt;，2&gt;&gt;12345678[centos@node ~]$ cat1 issue.out 2&gt; test.txt[centos@node ~]$ cat test.txt-bash: cat1: command not found[centos@node ~]$ cat issue.out1 2&gt;&gt; test.txt[centos@node ~]$ cat test.txt-bash: cat1: command not foundcat: issue.out1: No such file or directory 输入重定向： &lt;1234[centos@node ~]$ cat &gt; issue.out &lt; test.txt #从test.txt读取数据 然后输入到issue.out中[centos@node ~]$ cat issue.out-bash: cat1: command not foundcat: issue.out1: No such file or directory 管道定义：连接程序，实现将前一个命令的输出直接定向给后一个程序当做输入数据流 语法：COMMAND | COMMAND1 | COMMAND2 | … 1234567[centos@node ~]$ cat /etc/issue | tr 'a-z' 'A-Z'\SKERNEL \R ON AN \M[centos@node ~]$ who | head -2 | tr 'a-z' 'A-Z'ROOT TTY1 2017-01-06 10:52ROOT PTS/3 2017-01-12 10:00 (192.168.168.103) 本文出自Maxie’s Notes，转载请务必保留此出处http://maxiecloud.com/2017/01/17/bash2/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Bash的基础特性（1）]]></title>
      <url>%2F2017%2F01%2F10%2Fbash1%2F</url>
      <content type="text"><![CDATA[Bash Bash是一个为GNU计划编写的Unxi Shell。它的名字是一系列缩写：Bourne-Again SHell.Bourne shell是一个早期的重要shell，由史蒂夫·伯恩在1978年前后编写，并同Version 7 Unix一起发布。Bash则在1987年由布莱恩·福克斯创造 基础特性之一：命令历史（历史记录）执行shell进程时会在其会话中保存此前用户提交执行过的命令。 通过在命令行输入history命令来达到查看历史记录的目的。 而history命令默认存放的是1000条执行过的命令，想要修改存放数量就必须对环境变量进行修改。 history的四个环境变量 HISTSIZE：shell进程可保留的命令历史的条数； 12345[root@localhost ~]# echo $HISTSIZE1000[root@localhost ~]# HISTSIZE="1200"[root@localhost ~]# echo $HISTSIZE1200 HISTFILE：持久保存命令的文件； 通过ls -al ~的命令，可以得知HISTFILE存放于root用户的家目录下名为.bash_history的文件 12345678910111213[root@localhost /]# ls -al ~total 40dr-xr-x---. 2 root root 167 Jan 10 12:11 .dr-xr-xr-x. 17 root root 224 Jan 6 10:50 ..-rw-------. 1 root root 1287 Jan 6 10:50 anaconda-ks.cfg-rw-------. 1 root root 6286 Jan 10 17:28 .bash_history-rw-r--r--. 1 root root 18 Dec 29 2013 .bash_logout-rw-r--r--. 1 root root 176 Dec 29 2013 .bash_profile-rw-r--r--. 1 root root 176 Dec 29 2013 .bashrc-rw-r--r--. 1 root root 100 Dec 29 2013 .cshrc-rw-------. 1 root root 58 Jan 9 17:41 .lesshst-rw-r--r--. 1 root root 129 Dec 29 2013 .tcshrc-rw-------. 1 root root 896 Jan 9 18:31 .viminfo HISEFILESIZE：保存命令的文件大小 12[root@localhost /]# echo $HISTFILESIZE1000 HISTCONTROL：控制命令历史记录 变量值有三种可选： 1. ignoredups：忽略两条命令之间重复项（默认值） 2. ignorespace：忽略以空白字符开头的命令。在输入COMMAND之前，单击键盘Space键，即可实现忽略这条COMMAND 3. ignoreboth：以上两者同时生效 123[root@localhost /]# HISTCONTROL=ignoreboth[root@localhost /]# echo $HISTCONTROLignoreboth 修改变量值的方法：NAME=&#39;VALUE&#39;注意：这样的修改变量的方式，只会对当前shell进程生效。 history的命令用法history [-c] [-d offset] [n]： -c：清空history所有记录 -d offset：删除指定历史记录 n：显示最近的n条历史记录 history -anrw [filename]： -r：从历史文件读取命令历史到历史列表中 -w：把历史列表中的命令追加到历史文件中 filename：存储在root用户家目录下的.bash_history 调用命令历史列表中的命令!#：再一次执行历史列表中的第#条命令 123[root@localhost ~]# !227echo $HISTFILESIZE1000 !!：再一次执行上一条命令（与键盘⬆️箭头功能相同） 123[root@localhost /]# !!cat /etc/system-releaseCentOS Linux release 7.3.1611 (Core) !STRING：再一次执行命令历史列表中一个以STRING开头的命令 123[root@localhost ~]# !tytype historyhistory is a shell builtin 注意：能重复执行的命令有时候依赖于幂等性（幂等性：重复执行多次，结果不变） 调用上一条命令的最后一个参数 键盘快捷键：ESC+. 在调用的命令后使用!$ 1234567[root@localhost ~]# ls /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-ens33[root@localhost ~]# cat !$cat /etc/sysconfig/network-scripts/ifcfg-ens33TYPE="Ethernet"BOOTPROTO="dhcp"··· 基础特性之二：命令、路径补全机制命令补全shell程序在接收到用户命令的请求，分析完成之后，最左侧的字符串会被当做命令。给定的打头字符串如果能唯一标识某命令程序文件，则直接补全；不能唯一标识的某命令程序文件，再单击TAB键一次，会给出列表进行补全。 命令查找机制查找内部命令：根据PATH环境变量中设定的目录，自左而右逐个搜索目录下的文件名 路径补全根据给定的起始下，以对应路径下的打头字符串来逐一匹配起始路径下的每个文件；tab键： 如果能唯一标识，则直接补全 否则，再一次TAB，给出列表 基础特性之三：命令的执行状态结果命令执行的“状态结果”bash通过状态返回值来输出此结果： 成功：输出0 失败：输出非0，1-255之间 命令执行完成之后，其状态返回值保存于bash的特殊变量$?中 注意：只能获取最近的一条命令的返回值 引用命令的“执行结果”123$(COMMAND)或者`COMMAND` 基础特性之四：键盘快捷键Ctrl+a：跳转至命令行行首Ctrl+e：跳转至命令行行尾Ctrl+u：删除行首至光标所在处之间的所有字符Ctrl+k：删除光标所在处至行尾之间的所有字符Ctrl+l：相当于clear命令]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[网站简介]]></title>
      <url>%2F2017%2F01%2F07%2Fintroduce%2F</url>
      <content type="text"><![CDATA[这个网站是刚开始学马哥Linux运维做的。主要是分享一些学习过程中对每日或者每几天学习的总结，还有生活中的一些趣事。在博客这方面还是一个菜鸟，希望dalao多多包涵！ 联系方式：QQ：17045930Mail：maxie@mcy95.comWechat：mcy958623]]></content>
    </entry>

    
  
  
</search>
